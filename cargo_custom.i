********************************************************************************************
* C.A.R.G.O. - Amiga Hardware Registers                                                    *
*              Version 1.0 6-JUL-2019                                                      *
*                                                                                          *
* Information sourced from numerous websites including:                                    *
* http://coppershade.org/articles/Code/Reference/Custom_Chip_Register_List/                *
* http://amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node0060.html             *
* http://www.stashofcode.fr/code/afficher-sprites-et-bobs-sur-amiga/AGAByRandyOfComax.txt  *
*                                                                                          *
* uppercase names for register addresses                                                   *
* lowercase names for register offset values from $dff000                                  *
********************************************************************************************

CUSTOM    = $dff000 ;Custom chips base address
HARDWARE  = $dff000 ;Custom chips base address

BLTDDAT   = $dff000 ;Blitter destination early read (unusable)
DMACONR   = $dff002 ;DMA control (and blitter status) read
VPOSR     = $dff004 ;Read vertical raster position bit 9 (and interlace odd/even frame)
VHPOSR    = $dff006 ;Rest of raster XY position - High byte: vertical, low byte: horizontal
DSKDATR   = $dff008 ;Disk data early read (unusable)
JOY0DAT   = $dff00a ;Joystick/mouse 0 data (vert,horiz)
JOY1DAT   = $dff00c ;Joystick/mouse 1 data (vert,horiz)
CLXDAT    = $dff00e ;Poll (read and clear) sprite collision state
ADKCONR   = $dff010 ;Audio, disk control register read
POT0DAT   = $dff012 ;Pot counter pair 0 data (vert,horiz)
POT1DAT   = $dff014 ;Pot counter pair 1 data (vert,horiz)
POTGOR    = $dff016 ;Pot pin data read (formerly POTINP)
SERDATR   = $dff018 ;Serial port data and status read
DSKBYTR   = $dff01a ;Disk data byte and status read
INTENAR   = $dff01c ;Interrupt enable bits read
INTREQR   = $dff01e ;Interrupt request bits read

DSKPTH    = $dff020 ;Disk track buffer pointer (high 3 bits, 5 bits if ECS)
DSKPTL    = $dff022 ;Disk track buffer pointer (low 15 bits)
DSKLEN    = $dff024 ;Disk track buffer length
DSKDAT    = $dff026 ;Disk DMA data write
REFPTR    = $dff028 ;Refresh pointer
VPOSW     = $dff02a ;Write vert most sig. bits (and frame flop)
VHPOSW    = $dff02c ;Write vert and horiz pos of beam
COPCON    = $dff02e ;Coprocessor control register (CDANG)
SERDAT    = $dff030 ;Serial port data and stop bits write
SERPER    = $dff032 ;Serial port period and control
POTGO     = $dff034 ;Pot count start, pot pin drive enable data
JOYTEST   = $dff036 ;Write to all 4 joystick/mouse counters at once
STREQU    = $dff038 ;Strobe for horiz sync with VBLANK and EQU
STRVBL    = $dff03a ;Strobe for horiz sync with VBLANK
STRHOR    = $dff03c ;Strobe for horiz sync
STRLONG   = $dff03e ;Strobe for identification of long/short horiz line

BLTCON0   = $dff040 ;Blitter control register 0
BLTCON1   = $dff042 ;Blitter control register 1
BLTAFWM   = $dff044 ;Blitter first word mask for source A
BLTALWM   = $dff046 ;Blitter last word mask for source A
BLTCPT    = $dff048
BLTCPTH   = $dff048 ;Blitter pointer to source C (high 5 bits)
BLTCPTL   = $dff04a ;Blitter pointer to source C (low 15 bits)
BLTBPT    = $dff04c
BLTBPTH   = $dff04c ;Blitter pointer to source B (high 5 bits)
BLTBPTL   = $dff04e ;Blitter pointer to source B (low 15 bits)
BLTAPT    = $dff050
BLTAPTH   = $dff050 ;Blitter pointer to source A (high 5 bits)
BLTAPTL   = $dff052 ;Blitter pointer to source A (low 15 bits)
BLTDPT    = $dff054
BLTDPTH   = $dff054 ;Blitter pointer to destination D (high 5 bits)
BLTDPTL   = $dff056 ;Blitter pointer to destination D (low 15 bits)
BLTSIZE   = $dff058 ;Blitter start and size (window width,height)
BLTCON0L  = $dff05a ;Blitter control 0 lower 8 bits (minterms)
BLTSIZV   = $dff05c ;ECS: Blitter Vertical size (for 15 bit vert size = 32768 lines max) 
BLTSIZH   = $dff05e ;ECS: Blitter Horizontal size & start (for 11 bit horiz size = 32768 pixels max)

BLTCMOD   = $dff060 ;Blitter modulo for source C
BLTBMOD   = $dff062 ;Blitter modulo for source B
BLTAMOD   = $dff064 ;Blitter modulo for source A
BLTDMOD   = $dff066 ;Blitter modulo for destination D
;RESERVED = $dff068 ;Reserved
;RESERVED = $dff06a ;Reserved
;RESERVED = $dff06c ;Reserved
;RESERVED = $dff06e ;Reserved
BLTCDAT   = $dff070 ;Blitter source C data reg
BLTBDAT   = $dff072 ;Blitter source B data reg
BLTADAT   = $dff074 ;Blitter source A data reg
;RESERVED = $dff076 ;Reserved
SPRHDAT   = $dff078 ;AGA: Ext logic UHRES sprite pointer and data identifier
BPLHDAT   = $dff07a ;AGA: Ext logic UHRES bit plane identifier
LISAID    = $dff07c ;AGA: Chip revision level for Denise/Lisa
DENISEID  = $dff07c ;alias for LISAID
DSKSYNC   = $dff07e ;Disk sync pattern

COP1LC    = $dff080
COP1LCH   = $dff080 ;Write Copper pointer 1 (high 5 bits)
COP1LCL   = $dff082 ;Write Copper pointer 1 (low 15 bits)
COP2LC    = $dff084
COP2LCH   = $dff084 ;Write Copper pointer 2 (high 5 bits)
COP2LCL   = $dff086 ;Write Copper pointer 2 (low 15 bits)
COPJMP1   = $dff088 ;Trigger Copper 1 (any value)
COPJMP2   = $dff08a ;Trigger Copper 2 (any value)
COPINS    = $dff08c ;Coprocessor inst fetch identify
DIWSTRT   = $dff08e ;Display window start (upper left vert-hor pos)
DIWSTOP   = $dff090 ;Display window stop (lower right vert-hor pos)
DDFSTRT   = $dff092 ;Display bitplane data fetch start.hor pos
DDFSTOP   = $dff094 ;Display bitplane data fetch stop.hor pos
DMACON    = $dff096 ;DMA control write (clear or set)
CLXCON    = $dff098 ;Write Sprite collision control bits
INTENA    = $dff09a ;Interrupt enable bits (clear or set bits)
INTREQ    = $dff09c ;Interrupt request bits (clear or set bits)
ADKCON    = $dff09e ;Audio, disk and UART control

AUD0      = $dff0a0
AUD0LCH   = $dff0a0 ;Audio channel 0 pointer (high 5 bits)
AUD0LCL   = $dff0a2 ;Audio channel 0 pointer (low 15 bits)
AUD0LEN   = $dff0a4 ;Audio channel 0 length
AUD0PER   = $dff0a6 ;Audio channel 0 period
AUD0VOL   = $dff0a8 ;Audio channel 0 volume
AUD0DAT   = $dff0aa ;Audio channel 0 data
;RESERVED = $dff0ac ;Reserved
;RESERVED = $dff0ae ;Reserved
AUD1      = $dff0b0
AUD1LCH   = $dff0b0 ;Audio channel 1 pointer (high 5 bits)
AUD1LCL   = $dff0b2 ;Audio channel 1 pointer (low 15 bits)
AUD1LEN   = $dff0b4 ;Audio channel 1 length
AUD1PER   = $dff0b6 ;Audio channel 1 period
AUD1VOL   = $dff0b8 ;Audio channel 1 volume
AUD1DAT   = $dff0ba ;Audio channel 1 data
;RESERVED = $dff0bc ;Reserved
;RESERVED = $dff0be ;Reserved

AUD2      = $dff0c0
AUD2LCH   = $dff0c0 ;Audio channel 2 pointer (high 5 bits)
AUD2LCL   = $dff0c2 ;Audio channel 2 pointer (low 15 bits)
AUD2LEN   = $dff0c4 ;Audio channel 2 length
AUD2PER   = $dff0c6 ;Audio channel 2 period
AUD2VOL   = $dff0c8 ;Audio channel 2 volume
AUD2DAT   = $dff0ca ;Audio channel 2 data
;RESERVED = $dff0cc ;Reserved
;RESERVED = $dff0ce ;Reserved
AUD3      = $dff0d0
AUD3LCH   = $dff0d0 ;Audio channel 3 pointer (high 5 bits)
AUD3LCL   = $dff0d2 ;Audio channel 3 pointer (low 15 bits)
AUD3LEN   = $dff0d4 ;Audio channel 3 length
AUD3PER   = $dff0d6 ;Audio channel 3 period
AUD3VOL   = $dff0d8 ;Audio channel 3 volume
AUD3DAT   = $dff0da ;Audio channel 3 data
;RESERVED = $dff0dc ;Reserved
;RESERVED = $dff0de ;Reserved

BPL1PT    = $dff0e0
BPL1PTH   = $dff0e0 ;Bitplane pointer 1 (high 5 bits)
BPL1PTL   = $dff0e2 ;Bitplane pointer 1 (low 15 bits)
BPL2PT    = $dff0e4
BPL2PTH   = $dff0e4 ;Bitplane pointer 2 (high 5 bits)
BPL2PTL   = $dff0e6 ;Bitplane pointer 2 (low 15 bits)
BPL3PT    = $dff0e8
BPL3PTH   = $dff0e8 ;Bitplane pointer 3 (high 5 bits)
BPL3PTL   = $dff0ea ;Bitplane pointer 3 (low 15 bits)
BPL4PT    = $dff0ec
BPL4PTH   = $dff0ec ;Bitplane pointer 4 (high 5 bits)
BPL4PTL   = $dff0ee ;Bitplane pointer 4 (low 15 bits)
BPL5PT    = $dff0f0
BPL5PTH   = $dff0f0 ;Bitplane pointer 5 (high 5 bits)
BPL5PTL   = $dff0f2 ;Bitplane pointer 5 (low 15 bits)
BPL6PT    = $dff0f4
BPL6PTH   = $dff0f4 ;Bitplane pointer 6 (high 5 bits)
BPL6PTL   = $dff0f6 ;Bitplane pointer 6 (low 15 bits)
BPL7PT    = $dff0f8
BPL7PTH   = $dff0f8 ;AGA: Bitplane pointer 7 (high 5 bits)
BPL7PTL   = $dff0fa ;AGA: Bitplane pointer 7 (low 15 bits)
BPL8PT    = $dff0fc
BPL8PTH   = $dff0fc ;AGA: Bitplane pointer 8 (high 5 bits)
BPL8PTL   = $dff0fe ;AGA: Bitplane pointer 8 (low 15 bits)

BPLCON0   = $dff100 ;Bitplane depth and screen mode)
BPLCON1   = $dff102 ;Bitplane/playfield horizontal scroll values
BPLCON2   = $dff104 ;Sprites vs. Playfields priority
BPLCON3   = $dff106 ;AGA: Bitplane control reg (enhanced features)
BPL1MOD   = $dff108 ;Bitplane modulo (odd planes)
BPL2MOD   = $dff10a ;Bitplane modulo (even planes)
BPLCON4   = $dff10c ;AGA: Bitplane control reg (bitplane & sprite masks)
CLXCON2   = $dff10e ;AGA: Write Extended sprite collision control bits
BPL1DAT   = $dff110 ;Bitplane 1 data (parallel to serial convert)
BPL2DAT   = $dff112 ;Bitplane 2 data (parallel to serial convert)
BPL3DAT   = $dff114 ;Bitplane 3 data (parallel to serial convert)
BPL4DAT   = $dff116 ;Bitplane 4 data (parallel to serial convert)
BPL5DAT   = $dff118 ;Bitplane 5 data (parallel to serial convert)
BPL6DAT   = $dff11a ;Bitplane 6 data (parallel to serial convert)
BPL7DAT   = $dff11c ;AGA: Bitplane 7 data (parallel to serial convert)
BPL8DAT   = $dff11e ;AGA: Bitplane 8 data (parallel to serial convert)

SPR0PT    = $dff120
SPR0PTH   = $dff120 ;Sprite 0 pointer (high 5 bits)
SPR0PTL   = $dff122 ;Sprite 0 pointer (low 15 bits)
SPR1PT    = $dff124
SPR1PTH   = $dff124 ;Sprite 1 pointer (high 5 bits)
SPR1PTL   = $dff126 ;Sprite 1 pointer (low 15 bits)
SPR2PT    = $dff128
SPR2PTH   = $dff128 ;Sprite 2 pointer (high 5 bits)
SPR2PTL   = $dff12a ;Sprite 2 pointer (low 15 bits)
SPR3PT    = $dff12c
SPR3PTH   = $dff12c ;Sprite 3 pointer (high 5 bits)
SPR3PTL   = $dff12e ;Sprite 3 pointer (low 15 bits)
SPR4PT    = $dff130
SPR4PTH   = $dff130 ;Sprite 4 pointer (high 5 bits)
SPR4PTL   = $dff132 ;Sprite 4 pointer (low 15 bits)
SPR5PT    = $dff134
SPR5PTH   = $dff134 ;Sprite 5 pointer (high 5 bits)
SPR5PTL   = $dff136 ;Sprite 5 pointer (low 15 bits)
SPR6PT    = $dff138
SPR6PTH   = $dff138 ;Sprite 6 pointer (high 5 bits)
SPR6PTL   = $dff13a ;Sprite 6 pointer (low 15 bits)
SPR7PT    = $dff13c
SPR7PTH   = $dff13c ;Sprite 7 pointer (high 5 bits)
SPR7PTL   = $dff13e ;Sprite 7 pointer (low 15 bits)

SPR0      = $dff140
SPR0POS   = $dff140 ;Sprite 0 vert-horiz start pos data
SPR0CTL   = $dff142 ;Sprite 0 position and control data
SPR0DATA  = $dff144 ;Sprite 0 low bitplane data
SPR0DATB  = $dff146 ;Sprite 0 high bitplane data
SPR1      = $dff148
SPR1POS   = $dff148 ;Sprite 1 vert-horiz start pos data
SPR1CTL   = $dff14a ;Sprite 1 position and control data
SPR1DATA  = $dff14c ;Sprite 1 low bitplane data
SPR1DATB  = $dff14e ;Sprite 1 high bitplane data
SPR2      = $dff150
SPR2POS   = $dff150 ;Sprite 2 vert-horiz start pos data
SPR2CTL   = $dff152 ;Sprite 2 position and control data
SPR2DATA  = $dff154 ;Sprite 2 low bitplane data
SPR2DATB  = $dff156 ;Sprite 2 high bitplane data
SPR3      = $dff158
SPR3POS   = $dff158 ;Sprite 3 vert-horiz start pos data
SPR3CTL   = $dff15a ;Sprite 3 position and control data
SPR3DATA  = $dff15c ;Sprite 3 low bitplane data
SPR3DATB  = $dff15e ;Sprite 3 high bitplane data

SPR4      = $dff160
SPR4POS   = $dff160 ;Sprite 4 vert-horiz start pos data
SPR4CTL   = $dff162 ;Sprite 4 position and control data
SPR4DATA  = $dff164 ;Sprite 4 low bitplane data
SPR4DATB  = $dff166 ;Sprite 4 high bitplane data
SPR5      = $dff168
SPR5POS   = $dff168 ;Sprite 5 vert-horiz start pos data
SPR5CTL   = $dff16a ;Sprite 5 position and control data
SPR5DATA  = $dff16c ;Sprite 5 low bitplane data
SPR5DATB  = $dff16e ;Sprite 5 high bitplane data
SPR6      = $dff170
SPR6POS   = $dff170 ;Sprite 6 vert-horiz start pos data
SPR6CTL   = $dff172 ;Sprite 6 position and control data
SPR6DATA  = $dff174 ;Sprite 6 low bitplane data
SPR6DATB  = $dff176 ;Sprite 6 high bitplane data
SPR7      = $dff178
SPR7POS   = $dff178 ;Sprite 7 vert-horiz start pos data
SPR7CTL   = $dff17a ;Sprite 7 position and control data
SPR7DATA  = $dff17c ;Sprite 7 low bitplane data
SPR7DATB  = $dff17e ;Sprite 7 high bitplane data

COLOR     = $dff180
COLOR00   = $dff180 ;Palette color 00
COLOR01   = $dff182 ;Palette color 1
COLOR02   = $dff184 ;Palette color 2
COLOR03   = $dff186 ;Palette color 3
COLOR04   = $dff188 ;Palette color 4
COLOR05   = $dff18a ;Palette color 5
COLOR06   = $dff18c ;Palette color 6
COLOR07   = $dff18e ;Palette color 7
COLOR08   = $dff190 ;Palette color 8
COLOR09   = $dff192 ;Palette color 9
COLOR10   = $dff194 ;Palette color 10
COLOR11   = $dff196 ;Palette color 11
COLOR12   = $dff198 ;Palette color 12
COLOR13   = $dff19a ;Palette color 13
COLOR14   = $dff19c ;Palette color 14
COLOR15   = $dff19e ;Palette color 15

COLOR16   = $dff1a0 ;Palette color 16
COLOR17   = $dff1a2 ;Palette color 17
COLOR18   = $dff1a4 ;Palette color 18
COLOR19   = $dff1a6 ;Palette color 19
COLOR20   = $dff1a8 ;Palette color 20
COLOR21   = $dff1aa ;Palette color 21
COLOR22   = $dff1ac ;Palette color 22
COLOR23   = $dff1ae ;Palette color 23
COLOR24   = $dff1b0 ;Palette color 24
COLOR25   = $dff1b2 ;Palette color 25
COLOR26   = $dff1b4 ;Palette color 26
COLOR27   = $dff1b6 ;Palette color 27
COLOR28   = $dff1b8 ;Palette color 28
COLOR29   = $dff1ba ;Palette color 29
COLOR30   = $dff1bc ;Palette color 30
COLOR31   = $dff1be ;Palette color 31

HTOTAL    = $dff1c0 ;AGA: Highest number count in horiz line (VARBEAMEN = 1)
HSSTOP    = $dff1c2 ;AGA: Horiz line pos for HSYNC stop
HBSTRT    = $dff1c4 ;AGA: Horiz line pos for HBLANK start
HBSTOP    = $dff1c6 ;AGA: Horiz line pos for HBLANK stop
VTOTAL    = $dff1c8 ;AGA: Highest numbered vertical line (VARBEAMEN = 1)
VSSTOP    = $dff1ca ;AGA: Vert line for Vsync stop
VBSTRT    = $dff1cc ;AGA: Vert line for VBLANK start
VBSTOP    = $dff1ce ;AGA: Vert line for VBLANK stop
SPRHSTRT  = $dff1d0 ;AGA: UHRES sprite vertical start
SPRHSTOP  = $dff1d2 ;AGA: UHRES sprite vertical stop
BPLHSTRT  = $dff1d4 ;AGA: UHRES bit plane vertical start
BPLHSTOP  = $dff1d6 ;AGA: UHRES bit plane vertical stop
HHPOSW    = $dff1d8 ;AGA: DUAL mode hires H beam counter write
HHPOSR    = $dff1da ;AGA: DUAL mode hires H beam counter read
BEAMCON0  = $dff1dc ;Beam counter control register
HSSTRT    = $dff1de ;AGA: Horizontal sync start (VARHSY)

VSSTRT    = $dff1e0 ;AGA: Vertical sync start (VARVSY)
HCENTER   = $dff1e2 ;AGA: Horizontal pos for vsync on interlace
DIWHIGH   = $dff1e4 ;AGA: Display window upper bits for start/stop
BPLHMOD   = $dff1e6 ;AGA: UHRES bit plane modulo
SPRHPTH   = $dff1e8 ;AGA: UHRES sprite pointer (high 5 bits)
SPRHPTL   = $dff1ea ;AGA: UHRES sprite pointer (low 15 bits)
BPLHPTH   = $dff1ec ;AGA: VRam (UHRES) bitplane pointer (high 5 bits)
BPLHPTL   = $dff1ee ;AGA: VRam (UHRES) bitplane pointer (low 15 bits)
;RESERVED = $dff1f0 ;Reserved
;RESERVED = $dff1f2 ;Reserved
;RESERVED = $dff1f4 ;Reserved
;RESERVED = $dff1f6 ;Reserved
;RESERVED = $dff1f8 ;Reserved
;RESERVED = $dff1fa ;Reserved
FMODE     = $dff1fc ;AGA: Write Fetch mode (0=OCS compatible)
NOOP      = $dff1fe ;No operation/NULL (Copper NOP instruction)

bltddat   = $000 ;Blitter destination early read (unusable)
dmaconr   = $002 ;DMA control (and blitter status) read
vposr     = $004 ;Read vertical raster position bit 9 (and interlace odd/even frame)
vhposr    = $006 ;Rest of raster XY position - High byte: vertical, low byte: horizontal
dskdatr   = $008 ;Disk data early read (unusable)
joy0dat   = $00a ;Joystick/mouse 0 data (vert,horiz)
joy1dat   = $00c ;Joystick/mouse 1 data (vert,horiz)
clxdat    = $00e ;Poll (read and clear) sprite collision state
adkconr   = $010 ;Audio, disk control register read
pot0dat   = $012 ;Pot counter pair 0 data (vert,horiz)
pot1dat   = $014 ;Pot counter pair 1 data (vert,horiz)
potgor    = $016 ;Pot pin data read (formerly POTINP)
serdatr   = $018 ;Serial port data and status read
dskbytr   = $01a ;Disk data byte and status read
intenar   = $01c ;Interrupt enable bits read
intreqr   = $01e ;Interrupt request bits read

dskpth    = $020 ;Disk track buffer pointer (high 3 bits, 5 bits if ECS)
dskptl    = $022 ;Disk track buffer pointer (low 15 bits)
dsklen    = $024 ;Disk track buffer length
dskdat    = $026 ;Disk DMA data write
refptr    = $028 ;Refresh pointer
vposw     = $02a ;Write vert most sig. bits (and frame flop)
vhposw    = $02c ;Write vert and horiz pos of beam
copcon    = $02e ;Coprocessor control register (CDANG)
serdat    = $030 ;Serial port data and stop bits write
serper    = $032 ;Serial port period and control
potgo     = $034 ;Pot count start, pot pin drive enable data
joytest   = $036 ;Write to all 4 joystick/mouse counters at once
strequ    = $038 ;Strobe for horiz sync with VBLANK and EQU
strvbl    = $03a ;Strobe for horiz sync with VBLANK
strhor    = $03c ;Strobe for horiz sync
strlong   = $03e ;Strobe for identification of long/short horiz line

bltcon0   = $040 ;Blitter control register 0
bltcon1   = $042 ;Blitter control register 1
bltafwm   = $044 ;Blitter first word mask for source A
bltalwm   = $046 ;Blitter last word mask for source A
bltcpt    = $048
bltcpth   = $048 ;Blitter pointer to source C (high 5 bits)
bltcptl   = $04a ;Blitter pointer to source C (low 15 bits)
bltbpt    = $04c
bltbpth   = $04c ;Blitter pointer to source B (high 5 bits)
bltbptl   = $04e ;Blitter pointer to source B (low 15 bits)
bltapt    = $050
bltapth   = $050 ;Blitter pointer to source A (high 5 bits)
bltaptl   = $052 ;Blitter pointer to source A (low 15 bits)
bltdpt    = $054
bltdpth   = $054 ;Blitter pointer to destination D (high 5 bits)
bltdptl   = $056 ;Blitter pointer to destination D (low 15 bits)
bltsize   = $058 ;Blitter start and size (window width,height)
bltcon0l  = $05a ;Blitter control 0 lower 8 bits (minterms)
bltsizv   = $05c ;ECS: Blitter Vertical size (for 15 bit vert size = 32768 lines max) 
bltsizh   = $05e ;ECS: Blitter Horizontal size & start (for 11 bit horiz size = 32768 pixels max)

bltcmod   = $060 ;Blitter modulo for source C
bltbmod   = $062 ;Blitter modulo for source B
bltamod   = $064 ;Blitter modulo for source A
bltdmod   = $066 ;Blitter modulo for destination D
;RESERVED = $068 ;Reserved
;RESERVED = $06a ;Reserved
;RESERVED = $06c ;Reserved
;RESERVED = $06e ;Reserved
bltcdat   = $070 ;Blitter source C data reg
bltbdat   = $072 ;Blitter source B data reg
bltadat   = $074 ;Blitter source A data reg
;RESERVED = $076 ;Reserved
sprhdat   = $078 ;AGA: Ext logic UHRES sprite pointer and data identifier
bplhdat   = $07a ;AGA: Ext logic UHRES bit plane identifier
lisaid    = $07c ;AGA: Chip revision level for Denise/Lisa
deniseid  = $07c ;alias for LISAID
dsksync   = $07e ;Disk sync pattern

cop1lc    = $080
cop1lch   = $080 ;Write Copper pointer 1 (high 5 bits)
cop1lcl   = $082 ;Write Copper pointer 1 (low 15 bits)
cop2lc    = $084
cop2lch   = $084 ;Write Copper pointer 2 (high 5 bits)
cop2lcl   = $086 ;Write Copper pointer 2 (low 15 bits)
copjmp1   = $088 ;Trigger Copper 1 (any value)
copjmp2   = $08a ;Trigger Copper 2 (any value)
copins    = $08c ;Coprocessor inst fetch identify
diwstrt   = $08e ;Display window start (upper left vert-hor pos)
diwstop   = $090 ;Display window stop (lower right vert-hor pos)
ddfstrt   = $092 ;Display bitplane data fetch start.hor pos
ddfstop   = $094 ;Display bitplane data fetch stop.hor pos
dmacon    = $096 ;DMA control write (clear or set)
clxcon    = $098 ;Write Sprite collision control bits
intena    = $09a ;Interrupt enable bits (clear or set bits)
intreq    = $09c ;Interrupt request bits (clear or set bits)
adkcon    = $09e ;Audio, disk and UART control

aud0      = $0a0
aud0lch   = $0a0 ;Audio channel 0 pointer (high 5 bits)
aud0lcl   = $0a2 ;Audio channel 0 pointer (low 15 bits)
aud0len   = $0a4 ;Audio channel 0 length
aud0per   = $0a6 ;Audio channel 0 period
aud0vol   = $0a8 ;Audio channel 0 volume
aud0dat   = $0aa ;Audio channel 0 data
;RESERVED = $0ac ;Reserved
;RESERVED = $0ae ;Reserved
aud1      = $0b0
aud1lch   = $0b0 ;Audio channel 1 pointer (high 5 bits)
aud1lcl   = $0b2 ;Audio channel 1 pointer (low 15 bits)
aud1len   = $0b4 ;Audio channel 1 length
aud1per   = $0b6 ;Audio channel 1 period
aud1vol   = $0b8 ;Audio channel 1 volume
aud1dat   = $0ba ;Audio channel 1 data
;RESERVED = $0bc ;Reserved
;RESERVED = $0be ;Reserved

aud2      = $0c0
aud2lch   = $0c0 ;Audio channel 2 pointer (high 5 bits)
aud2lcl   = $0c2 ;Audio channel 2 pointer (low 15 bits)
aud2len   = $0c4 ;Audio channel 2 length
aud2per   = $0c6 ;Audio channel 2 period
aud2vol   = $0c8 ;Audio channel 2 volume
aud2dat   = $0ca ;Audio channel 2 data
;RESERVED = $0cc ;Reserved
;RESERVED = $0ce ;Reserved
aud3      = $0d0
aud3lch   = $0d0 ;Audio channel 3 pointer (high 5 bits)
aud3lcl   = $0d2 ;Audio channel 3 pointer (low 15 bits)
aud3len   = $0d4 ;Audio channel 3 length
aud3per   = $0d6 ;Audio channel 3 period
aud3vol   = $0d8 ;Audio channel 3 volume
aud3dat   = $0da ;Audio channel 3 data
;RESERVED = $0dc ;Reserved
;RESERVED = $0de ;Reserved

bpl1pt    = $0e0
bpl1pth   = $0e0 ;Bitplane pointer 1 (high 5 bits)
bpl1ptl   = $0e2 ;Bitplane pointer 1 (low 15 bits)
bpl2pt    = $0e4
bpl2pth   = $0e4 ;Bitplane pointer 2 (high 5 bits)
bpl2ptl   = $0e6 ;Bitplane pointer 2 (low 15 bits)
bpl3pt    = $0e8
bpl3pth   = $0e8 ;Bitplane pointer 3 (high 5 bits)
bpl3ptl   = $0ea ;Bitplane pointer 3 (low 15 bits)
bpl4pt    = $0ec
bpl4pth   = $0ec ;Bitplane pointer 4 (high 5 bits)
bpl4ptl   = $0ee ;Bitplane pointer 4 (low 15 bits)
bpl5pt    = $0f0
bpl5pth   = $0f0 ;Bitplane pointer 5 (high 5 bits)
bpl5ptl   = $0f2 ;Bitplane pointer 5 (low 15 bits)
bpl6pt    = $0f4
bpl6pth   = $0f4 ;Bitplane pointer 6 (high 5 bits)
bpl6ptl   = $0f6 ;Bitplane pointer 6 (low 15 bits)
bpl7pt    = $0f8
bpl7pth   = $0f8 ;AGA: Bitplane pointer 7 (high 5 bits)
bpl7ptl   = $0fa ;AGA: Bitplane pointer 7 (low 15 bits)
bpl8pt    = $0fc
bpl8pth   = $0fc ;AGA: Bitplane pointer 8 (high 5 bits)
bpl8ptl   = $0fe ;AGA: Bitplane pointer 8 (low 15 bits)

bplcon0   = $100 ;Bitplane depth and screen mode)
bplcon1   = $102 ;Bitplane/playfield horizontal scroll values
bplcon2   = $104 ;Sprites vs. Playfields priority
bplcon3   = $106 ;AGA: Bitplane control reg (enhanced features)
bpl1mod   = $108 ;Bitplane modulo (odd planes)
bpl2mod   = $10a ;Bitplane modulo (even planes)
bplcon4   = $10c ;AGA: Bitplane control reg (bitplane & sprite masks)
clxcon2   = $10e ;AGA: Write Extended sprite collision control bits
bpl1dat   = $110 ;Bitplane 1 data (parallel to serial convert)
bpl2dat   = $112 ;Bitplane 2 data (parallel to serial convert)
bpl3dat   = $114 ;Bitplane 3 data (parallel to serial convert)
bpl4dat   = $116 ;Bitplane 4 data (parallel to serial convert)
bpl5dat   = $118 ;Bitplane 5 data (parallel to serial convert)
bpl6dat   = $11a ;Bitplane 6 data (parallel to serial convert)
bpl7dat   = $11c ;AGA: Bitplane 7 data (parallel to serial convert)
bpl8dat   = $11e ;AGA: Bitplane 8 data (parallel to serial convert)

spr0pt    = $120
spr0pth   = $120 ;Sprite 0 pointer (high 5 bits)
spr0ptl   = $122 ;Sprite 0 pointer (low 15 bits)
spr1pt    = $124
spr1pth   = $124 ;Sprite 1 pointer (high 5 bits)
spr1ptl   = $126 ;Sprite 1 pointer (low 15 bits)
spr2pt    = $128
spr2pth   = $128 ;Sprite 2 pointer (high 5 bits)
spr2ptl   = $12a ;Sprite 2 pointer (low 15 bits)
spr3pt    = $12c
spr3pth   = $12c ;Sprite 3 pointer (high 5 bits)
spr3ptl   = $12e ;Sprite 3 pointer (low 15 bits)
spr4pt    = $130
spr4pth   = $130 ;Sprite 4 pointer (high 5 bits)
spr4ptl   = $132 ;Sprite 4 pointer (low 15 bits)
spr5pt    = $134
spr5pth   = $134 ;Sprite 5 pointer (high 5 bits)
spr5ptl   = $136 ;Sprite 5 pointer (low 15 bits)
spr6pt    = $138
spr6pth   = $138 ;Sprite 6 pointer (high 5 bits)
spr6ptl   = $13a ;Sprite 6 pointer (low 15 bits)
spr7pt    = $13c
spr7pth   = $13c ;Sprite 7 pointer (high 5 bits)
spr7ptl   = $13e ;Sprite 7 pointer (low 15 bits)

spr0      = $140
spr0pos   = $140 ;Sprite 0 vert-horiz start pos data
spr0ctl   = $142 ;Sprite 0 position and control data
spr0data  = $144 ;Sprite 0 low bitplane data
spr0datb  = $146 ;Sprite 0 high bitplane data
spr1      = $148
spr1pos   = $148 ;Sprite 1 vert-horiz start pos data
spr1ctl   = $14a ;Sprite 1 position and control data
spr1data  = $14c ;Sprite 1 low bitplane data
spr1datb  = $14e ;Sprite 1 high bitplane data
spr2      = $150
spr2pos   = $150 ;Sprite 2 vert-horiz start pos data
spr2ctl   = $152 ;Sprite 2 position and control data
spr2data  = $154 ;Sprite 2 low bitplane data
spr2datb  = $156 ;Sprite 2 high bitplane data
spr3      = $158
spr3pos   = $158 ;Sprite 3 vert-horiz start pos data
spr3ctl   = $15a ;Sprite 3 position and control data
spr3data  = $15c ;Sprite 3 low bitplane data
spr3datb  = $15e ;Sprite 3 high bitplane data

spr4      = $160
spr4pos   = $160 ;Sprite 4 vert-horiz start pos data
spr4ctl   = $162 ;Sprite 4 position and control data
spr4data  = $164 ;Sprite 4 low bitplane data
spr4datb  = $166 ;Sprite 4 high bitplane data
spr5      = $168
spr5pos   = $168 ;Sprite 5 vert-horiz start pos data
spr5ctl   = $16a ;Sprite 5 position and control data
spr5data  = $16c ;Sprite 5 low bitplane data
spr5datb  = $16e ;Sprite 5 high bitplane data
spr6      = $170
spr6pos   = $170 ;Sprite 6 vert-horiz start pos data
spr6ctl   = $172 ;Sprite 6 position and control data
spr6data  = $174 ;Sprite 6 low bitplane data
spr6datb  = $176 ;Sprite 6 high bitplane data
spr7      = $178
spr7pos   = $178 ;Sprite 7 vert-horiz start pos data
spr7ctl   = $17a ;Sprite 7 position and control data
spr7data  = $17c ;Sprite 7 low bitplane data
spr7datb  = $17e ;Sprite 7 high bitplane data

color     = $180
color00   = $180 ;Palette color 00
color01   = $182 ;Palette color 1
color02   = $184 ;Palette color 2
color03   = $186 ;Palette color 3
color04   = $188 ;Palette color 4
color05   = $18a ;Palette color 5
color06   = $18c ;Palette color 6
color07   = $18e ;Palette color 7
color08   = $190 ;Palette color 8
color09   = $192 ;Palette color 9
color10   = $194 ;Palette color 10
color11   = $196 ;Palette color 11
color12   = $198 ;Palette color 12
color13   = $19a ;Palette color 13
color14   = $19c ;Palette color 14
color15   = $19e ;Palette color 15

color16   = $1a0 ;Palette color 16
color17   = $1a2 ;Palette color 17
color18   = $1a4 ;Palette color 18
color19   = $1a6 ;Palette color 19
color20   = $1a8 ;Palette color 20
color21   = $1aa ;Palette color 21
color22   = $1ac ;Palette color 22
color23   = $1ae ;Palette color 23
color24   = $1b0 ;Palette color 24
color25   = $1b2 ;Palette color 25
color26   = $1b4 ;Palette color 26
color27   = $1b6 ;Palette color 27
color28   = $1b8 ;Palette color 28
color29   = $1ba ;Palette color 29
color30   = $1bc ;Palette color 30
color31   = $1be ;Palette color 31

htotal    = $1c0 ;AGA: Highest number count in horiz line (VARBEAMEN = 1)
hsstop    = $1c2 ;AGA: Horiz line pos for HSYNC stop
hbstrt    = $1c4 ;AGA: Horiz line pos for HBLANK start
hbstop    = $1c6 ;AGA: Horiz line pos for HBLANK stop
vtotal    = $1c8 ;AGA: Highest numbered vertical line (VARBEAMEN = 1)
vsstop    = $1ca ;AGA: Vert line for Vsync stop
vbstrt    = $1cc ;AGA: Vert line for VBLANK start
vbstop    = $1ce ;AGA: Vert line for VBLANK stop
sprhstrt  = $1d0 ;AGA: UHRES sprite vertical start
sprhstop  = $1d2 ;AGA: UHRES sprite vertical stop
bplhstrt  = $1d4 ;AGA: UHRES bit plane vertical start
bplhstop  = $1d6 ;AGA: UHRES bit plane vertical stop
hhposw    = $1d8 ;AGA: DUAL mode hires H beam counter write
hhposr    = $1da ;AGA: DUAL mode hires H beam counter read
beamcon0  = $1dc ;Beam counter control register
hsstrt    = $1de ;AGA: Horizontal sync start (VARHSY)

vsstrt    = $1e0 ;AGA: Vertical sync start (VARVSY)
hcenter   = $1e2 ;AGA: Horizontal pos for vsync on interlace
diwhigh   = $1e4 ;AGA: Display window upper bits for start/stop
bplhmod   = $1e6 ;AGA: UHRES bit plane modulo
sprhpth   = $1e8 ;AGA: UHRES sprite pointer (high 5 bits)
sprhptl   = $1ea ;AGA: UHRES sprite pointer (low 15 bits)
bplhpth   = $1ec ;AGA: VRam (UHRES) bitplane pointer (high 5 bits)
bplhptl   = $1ee ;AGA: VRam (UHRES) bitplane pointer (low 15 bits)
;RESERVED = $1f0 ;Reserved
;RESERVED = $1f2 ;Reserved
;RESERVED = $1f4 ;Reserved
;RESERVED = $1f6 ;Reserved
;RESERVED = $1f8 ;Reserved
;RESERVED = $1fa ;Reserved
fmode     = $1fc ;AGA: Write Fetch mode (0=OCS compatible)
noop      = $1fe ;No operation/NULL (Copper NOP instruction)
